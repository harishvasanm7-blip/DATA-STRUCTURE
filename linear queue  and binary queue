/*#include<stdio.h>
#define size 5
int f=-1,r=-1,que[size];
void enqueue();
void dequeue();
void display();

int main(){
	enqueue();
	dequeue();
	display();
	
}

void enqueue(){
	int ele;
	scanf("%d",&ele);
	
	if (r==size-1){
		printf("Queue full");
		
	}
	else{
		if(f==-1&&r==-1){
			f=0;
			r=0;
		}
		else{
			r+=1;
		}
		que[r]=ele;
	}
	
}


void dequeue(){
	int ele;
	if (f==-1&&r==-1){
		printf("empty list ");
	}
	else{
		
		ele=que[f];
		if(f==r){
			f=-1;
			r=-1;
		}
		else{
			f+=1;
			printf("The deleted element is %d",ele);
		}
	}
}


void display(){
	int i;
	if (f==-1&&r==-1){
		printf("Queue empty ");
	}
	else{
		for (i=f;i<=r;i++){
			printf("%d",que[i]);
		}
	}
}*\

#include <stdio.h>
#include<malloc.h>

struct node
{
	int data;
	struct node *next;
	
}*front=NULL,*rear=NULL,*p,*temp;


void enqueue(int ele)
{
	temp = (struct node *)malloc(sizeof(struct node ));
	temp->data=ele;
	temp->next=NULL;
	if(front==NULL && rear==NULL)
	{
		front=temp;
		rear=temp;

	}
	else 
	{
		for(p=front;p->next!=NULL;p=p->next);
		p->next = temp;
		p=temp;
		rear=temp;
	}
}

void dequeue()
{
	if(front==NULL&&rear==NULL)
		printf("QUEUE-SLL is Empty");
	else
	{
		p=front;
		front=p->next;
		free(p);
	}
}


void display()
{
	
	if(front==NULL&&rear==NULL)
		printf("QUEUE-SLL is Empty");
	else
		for(p=front; p != NULL; p=p->next)
			printf(" %d ->",p->data);
}



int main()
{
		
	enqueue(20);
	enqueue(30);
	enqueue(40);
	enqueue(50);
	enqueue(60);
	display();
	
	dequeue();
	dequeue();
	dequeue();
	printf("\n");
	display();
}
